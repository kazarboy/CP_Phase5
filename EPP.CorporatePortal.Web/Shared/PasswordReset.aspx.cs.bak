using EPP.CorporatePortal.DAL.Entity;
using EPP.CorporatePortal.DAL.Service;
using EPP.CorporatePortal.Models;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace EPP.CorporatePortal.Shared
{
    public partial class ResetPassword : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            var userName = "";

            try
            {
                var appCode = CommonService.GetSystemConfigValue("AppCode");
                userName = Session[appCode + "Username"].ToString();
            }
            catch
            {
                userName = "";
            }

            //Redirect to logout if No userID session
            if(string.IsNullOrEmpty(userName))
                Response.Redirect("/Shared/Logout.aspx");

            var usernameCheck = userName.Contains("@") ? userName.Substring(0, userName.LastIndexOf('@')) : userName; //Only take username without trailing email. e.g "username" instead of "username@email.com"

            hdnUsername.Value = usernameCheck;
        }
        protected void BtnResetPassword_Click(object sender, EventArgs e)
        {
            var blnContinue = false;
            int tmpAudit;

            if (Page.IsValid)
            {
                try
                {
                    var appCode = CommonService.GetSystemConfigValue("AppCode");
                    var businessEntityID = CommonService.GetSystemConfigValue("BusinessEntityID");
                    var userName = Session[appCode + "Username"].ToString();

                    var password = TxtCurrPassword.Text;
                    var newPassword = TxtNewPassword.Text;
                    var confirmPassword = TxtConfirmNewPassword.Text;

                    if (!newPassword.Equals(confirmPassword)) //Checks if both new password and confirm new password are the same.
                    {
                        spanResetStatus.InnerHtml = "Password doesn't match!";
                        spanResetStatus.Style["display"] = "block";
                        return;
                    }

                    //2nd validation check in case javascript error/bypassed
                    var usernameCheck = userName.Contains("@") ? userName.Substring(0, userName.LastIndexOf('@')) : userName; //Only take username without trailing email. e.g "username" instead of "username@email.com"
                    var expression = @"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[~`!@#$%^&*(){}+=-])[A-Za-z\d~`!@#$%^&*(){}+=-]{8,}$";
                    Regex regex = new Regex(expression);
                    Match match = regex.Match(newPassword);
                    if (!match.Success || newPassword.Contains(usernameCheck)) //Now checks if contains username as well
                    {
                        spanResetStatus.InnerHtml = "New Password not complex";
                        spanResetStatus.Style["display"] = "block";
                        return;
                    }

                    ////For testing purposes. To be deleted once AgentPortalHub coding done.
                    //blnContinue = true;
                    ////For testing purposes. To be deleted once AgentPortalHub coding done.

                    var storedProcServ = new StoredProcService(userName);

                    tmpAudit = new AuditTrail().LogAuditTrail(DateTime.Now, Common.Enums.AuditType.Debug, userName, "Generating reset password body {username: " + userName + ", appcode: " + appCode + ", businessid: " + businessEntityID + "}", "BtnResetPassword_Click");
                    var accReq = new ResetPasswordTokenRequest() { AccountCode = userName, Password = password, AppCode = appCode, BusinessEntityID = Convert.ToInt32(businessEntityID), NewPassword = newPassword };
                    var body = JsonConvert.SerializeObject(accReq, Formatting.Indented);

                    string token = CommonService.EncryptString(body);
                    var resetTokenResponse = new LoginService().UpdatePassword(token, userName);
                    if (resetTokenResponse.Valid)
                    {
                        tmpAudit = new AuditTrail().LogAuditTrail(DateTime.Now, Common.Enums.AuditType.Debug, userName, "Reset Password successfully to Agent Portal Hub", "BtnResetPassword_Click");
                        //Save the last time user changed password
                        storedProcServ.UpdateLastPasswordChangeDate(userName);
                        blnContinue = true;
                    }
                    else
                    {
                        spanResetStatus.InnerHtml = resetTokenResponse.ResponseStatusEntity.StatusDescription;
                        spanResetStatus.Style["display"] = "block";

                        tmpAudit = new AuditTrail().LogAuditTrail(DateTime.Now, Common.Enums.AuditType.Debug, userName, "Reset Password not valid: " + resetTokenResponse.ResponseStatusEntity.StatusDescription, "BtnResetPassword_Click");
                    }
                }
                catch (Exception ex)
                {
                    var appCode = CommonService.GetSystemConfigValue("AppCode");
                    var userName = Session[appCode + "Username"].ToString();

                    spanResetStatus.InnerHtml = "Error occured";
                    spanResetStatus.Style["display"] = "block";

                    tmpAudit = new AuditTrail().LogAuditTrail(DateTime.Now, Common.Enums.AuditType.Error, userName, "Error in BtnResetPassword_Click: " + ex.Message, "ResetPassword");
                }
                if (blnContinue)
                {
                    //User will need to relogin using the new login credentials
                    Response.Redirect("/Shared/PasswordResetSuccess.aspx");
                }
            }
            else
            {
                spanResetStatus.InnerHtml = "Please make sure all fields are filled in correctly";
                spanResetStatus.Style["display"] = "block";
            }

        }
    }
}